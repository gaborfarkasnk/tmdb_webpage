amikor ezt megnyitottuk akkor a git majd mondja, hogy egy mappával följebb van git, meg akarod niytni?
igen nyissuk meg, aztán fönt menüben mutatja is

---------------------------------------------------------
variables.css
globális változót készítünk, amit máshol is tudunk használni
ez a szintaktika:

:root{
    --navbar-color: #032541;
    --light-blue: #01b3e3;
    --default-border: 1px solid rgba(0,0,0,0.112);
    --default-border-radius: 10px;
}

utána @import "variables.css"; main.css-be

main.css-be haszáljuk:
body{
    background-color: var(--navbar-color); //így lehet használni
    color: white;
    font-family: "Roboto";
}

---------------------------------------------------------------
tmdb oldalról a betű inspect-el lelopva
emlékeztető: google fonts, Source Sans 3, get font, de figyelni az előző fontokat törölni a honlapon
utána embebbed code, az elsőt kell másolni a html-be másolandót
ezt be kell illeszteni az index.html-be
utána a google oldalon a css code-ból a font-family-t másolni
font-family: "Source Sans 3", serif;

--------------------------------------------------------------------
így lehet navbaron középre és egymástól eltolni az itemeket
    display: flex;
    align-items: center;
    justify-content: space-between;

még egy trükk:
Navbar.js-be is lehet direktben stílust írni, nem kell css mindig
ol inherit esetén jobb ott
illetve két div kell, mert egyik bal oldalon van a másik jobb oldalon

      <div style={{display:"inherit"}}> //css helyett ítt írtuk a stílust
        <img className='navbar-logo' src="https://www.themoviedb.org/assets/2/v4/logos/v2/blue_short-8e7b30f73a4020692ccca9c88bafe5dcb6f8a62a4c6bc55cd9ba82bb2cd95f6c.svg" alt="logo" />
        <div>Movies</div>
        <div>TV Shows</div>
        <div>People</div>
        <div>More</div>
      </div>

      <div style={{display:"inherit"}}> //css helyett ítt írtuk a stílust
        <div>Login</div>
        <div>Join TMDB</div>
      </div>
-------------------------------------------------------------------------

kellene egy nagyító ikon a kereséshez, ezt innen lehet linkelni:
font awesome
https://fontawesome.com
gaborfarkasnk@gmail.com
Krudygyula29
https://fontawesome.com/kits/7387c023b7/setup //setupra kell eljutni valahogy
utána <script src="https://kit.fontawesome.com/7387c023b7.js" crossorigin="anonymous"></script>
bemásolni az index.html-be
utána Navbar.js-be ezt: <i class="fa-solid fa-magnifying-glass"></i>
figyelni, hogy módosítani kell ezt, mert nem React kompatibilis teljesen
<i className="fa-solid fa-magnifying-glass"/>
így már jó lesz

innentől lehet más free ikont is berakni, pl: 
<i className="fa-solid fa-house"/> //Home ikon
css.be így módosítottam
.fa-house{
    margin-left: 30px;
    margin-right: 20px;
    padding-top: 2px; kicsit eltoltam lefelé
}
--------------------------------------------------------------------
button:
érdemes main.css-be megcsinálni az alap és inverted buttont. sok felé használjuk
button{
    background-color: var(--light-blue);
    font: inherit;
    color: var(--default-font-color);
    padding: 10px;
    font-weight: bold;
    font-size: 24px;
    border: none;
    border-radius: 10px;
    cursor: pointer;
}

.inverted-button{
    background-color: var(--default-font-color);
    color: var(--light-blue);
}

-----------------------------------------------------------------------------------
div konténerre jellemző tulajdonság:
magassága akkora amekkora kell a childoknak, szélessége meg a teljes ablaké

----------------------------------------------------------------------------
jó lenne a listview-ba egymás mellé rendezni a sidebart és movielistview-t
ehhez kell flex box, mert az alapból ezt csinálja
1 opció van: szokásos, még egy div, className, css stb
de itt egy másik
2 className van egy divnek, először az elsőt veszi figyelembe utána a másodikat stb
fontos hogy space-t rakjunk közéjük

export default function Listview() {
  return (
    <div className='content horisontal-box'>
        <Sidebar/>
        <MovieListView/>
    </div>
  )
}

--------------------------------------------------
feladat, többször használható box-ot hozunk létre amik a side-barba kellenek, de különböző névvel kerülnek be
ezért a functionnak adunk egy paramétert
nicro könyvtárba teszük

FoldableCard.js

import React from 'react'

export default function FoldableCard({title}) { //title a paraméter, figyelni a kapcsos zárójellekre
  return (
    <div>{title}</div> //ide rakjuk be kapcsossal!
  )
}
vagy uez másként megoldva

export default function FoldableCard(props) { //ilyenkor nem kell a kapcsos zárójel
  return (
    <div>{props.title}</div> //itt kell a kapcsos és minden elé kell a props.
  )
}


ezt a Siderbar.js-ben használtuk

import React from 'react'
import FoldableCard from './micro/FoldableCard'

export default function Sidebar() {
  return (
    <div className='sidebar'>

      <h2>Popular Movies</h2>
      <FoldableCard title='Sort'/> // így kell megadni a paramétert
      <FoldableCard title='Where to watch'/> // így kell megadni a paramétert
      <FoldableCard title='Filters'/> // így kell megadni a paramétert
      
    </div>
  )
}

-------------------------------------------------------------------------
2 paraméter is lehet egy függvényben, mint Pythonnál, vessző kell közéjük

export default function FoldableCard({title, content}) {
  return (
    <div>
        <b>{title}</b>
        
        <div>
            {content} //ez az új paraméter
        </div>
    </div>
  )
}

ezt beinjektáljuk a Sidebar.js-be
export default function Sidebar() {
  return (
    <div className='sidebar'>

      <h2>Popular Movies</h2>
      <FoldableCard title='Sort' content={ //így rakunk bele egyedi tartalmat, injektálunk
        <div>
          Lorem ipsum dolor sit amet. //ezt injektáltuk bem csak a sort alá rakta be
        </div>
        
        }/>
      <FoldableCard title='Where to watch'/>
      <FoldableCard title='Filters'/>
      
    </div>
  )
}
-------------------------------------------------------------------------
példának mind a 3 helyre bevittünk más más adatot, de képet bármit lehet

export default function Sidebar() {
  return (
    <div className='sidebar'>

      <h2>Popular Movies</h2>
      <FoldableCard title='Sort' content={
        <p>
          Lorem ipsum dolor sit amet. //ide ezt vittük be
        </p>
      }/>

      <FoldableCard title='Where to watch'content={
        <h2>Hello</h2> //ide ezt vittük be
      }/>

      <FoldableCard title='Filters' content={
        <button>Click</button> //ide ezt vittük be
      }/>
      
    </div>
  )
}

--------------------------------------------------------------------------
foldablecard.js így alakult, kapott class nevet
export default function FoldableCard({title, content}) {
  return (
    <div className='card'>
        <b>{title}</b>

        <div>
            {content}
        </div>
    </div>
  )
}

------------------------------------------------------------------------
én micro css- könytárat készítettem
FoldableCard.css-nek
mainbe: @import "./micro/FoldableCard.css";

.card{
    border: var(--default-border);
    border-radius: var(--default-border-radius);
    padding: 10px;
    box-shadow: -0px 0px 15px 3px rgba(0,0,0,0.15);
    background-color: white;
    display: flex;
}
------------------------------------------------------------------------

shaddow generátor van a neten
https://cssgenerator.org/box-shadow-css-generator.html#google_vignette
csak az első sor kell a kódból //legtöbb browsernek jó ez
box-shadow: -8px 0px 28px 3px rgba(138,130,130,0.74);
box-shadow: -0px 0px 15px 3px rgba(0,0,0,0.15); //számokat át lehet írni, beállítani amit akarunk

margót nem itt adtuk meg, mert azt majd a helyén, mert különbözők lesznek

------------------------------------------------------------------------------
egy példa a css sorrendiség fontosságáról:


export default function FoldableCard({title, content}) {
  return (
    <div className='card sidebar-card'> //ide beraktunk egy másik class never is amit a navbar.css-ben akarunk állítani majd
        <b>{title}</b>

        <div>
            {content}
        </div>
    </div>
  )
}

Navbar.css
.sidebar-card{
    margin-bottom: 20px;
    border-color: red; //nem működik, mert a main css import később van
}

mert main.css-be hamarabb jön be importban a Navbar mint a Folldable card és felülírja

megoldás:

 border-color: red !important; //ezt kell beírni és ezt veszi figyelembe

vagy style=.... ez erősebb mint a className stílus

sztem a legjobb, ha sokat módosuló paramétert kivesszük és helyben adjuk meg

---------------------------------------------------------------------------
kerestünk egy jobbra nyilat
<i className="fa-solid fa-angle-right"/>

-------------------------------------------------------------------------------------

box-nknak adunk funkciót, ha rákattintunk nyil forduljon le és nyíljon ki a box

2 féle változót szoktunk használni
    let opened = false; //ez módosítható
    const this_is_fixed = true; //ez meg nem

először Foldable.js- be

export default function FoldableCard({title, content}) {
    
    let opened = false; //változót hoztunk létre
      
    return (
    <div className='card sidebar-card'>
        <div>

            <b>{title}</b>
            <i className="fa-solid fa-angle-right"/>
        </div>
        

        <div>
            {
                opened? content: null //itt meg hozzá az if függvényt (ha opened true akkor megmutatja a contentet amit a sidebar-ból hozunk be,ha nem akkor nem mutat semmit

            }
        </div>
    </div>
  )
}

utána kell egy clikk esemény ami az opened státuszt váltja majd

FoldableCard.js-be
<div className='card sidebar-card' onClick={e =>console.log('card clicked')}>
magyarázat: onClick esemény-re várunk, ez az e =>
ha megtörtént kiírja a browser terminálba a szöveget nem a vs codeba!
inspect console clear console
most ha clikkelek kiírja
de ez mégsem jó, mert React nem figyeli a javascript változók módosítását
<div className='card sidebar-card' onClick={e =>opened= true}> //tehát ez nem csinálja sajnos

megoldás state kell

import React, {useState} from 'react' //kell egy új import a useState ilyen kapcsosban
azt jelenti hogy szeretnénk stateket használni

kell egy const változó szögletes zárójel
const []
utána változó név kell és utána egy setter kell hozzá
utána = useState{false} //egyenlőség jel után a függvény és definiálunk egy alapállapotot

const [opened, set_opened] = useState(false) //ilyen lett
onClick={e =>set_opened(true)}> //klikk esemény után ez lesz
de nem lehet becsukni
erre a megoldás:
onClick={e =>set_opened(!opened)}> //true helyett !opened lett beírva, így csukódik


most a nyilat és title-t bevittük egy div-be, ezt flexeljük és space between css-be
    <div className='card sidebar-card' onClick={e =>set_opened(!opened)}>
        <div className='header'> //ezt kapjuk el css-be
            <b>{title}</b>
            {
                opened? <i className="fa-solid fa-angle-down"/> : <i className="fa-solid fa-angle-right"/>
            }
        </div>

így lehet explicit hivatkozni, ez azért kell és jó mert lehetnek névütközések
.sidebar-card .header{
    color: red !important; //megnézzük a szelektálás jó-e
    display: flex;
    justify-content: space-between;
}

ezzel a Foldablecard.js kész
minden a contenttől függ és azt Sidebar.js adja neki

-----------------------------------------------------------------------------
kell egy vonal is a sorting alá ami kiér a box szélére, tmdb honlapon olyan, csak kimaradt


FoldableCard.js-be
vonalat beraktuk a title alá és írtunk rá feltételt
            {
                opened? <hr />: null
            }

main.css-be
hr{
    border: none;
    border-bottom: var(--default-border);
}

FoldableCard.css-be
vegyük ki a paddinget, majd megadjuk ahol kell

Sidebar.css-be
.sidebar-card .header{
    display: flex;
    justify-content: space-between;
    padding: 10px; //itt adtunk paddinget, amit kivettünk feljebb
}

Sidebar.js-be
function Sorting(){
  return(
    <div className='card-content'> //className beírva
      <p>Sort Results by</p>
    </div>
  )

Sidebar.css-be
.sidebar-card .card-content{
    padding: 10px;
}
-------------------------------------------------------------------------

Sidebar.js

elkészítjük a contentet amit beszúrunk

export default function Sidebar() { // ami előtt export default van írva az importálható másik js-be
nekünk ez most nem kell az új függvényhez
function Sorting(){ //nincs előtte export defult mert ez helyi függvény lesz, csak itt használjuk ebben a js.ben
  return(
    <div>Sorting...</div>
  )
}

folytatás:
<FoldableCard title='Sort' content={<Sorting/>}/> //behívtuk a conent után

folytatás: //legördülő menü lesz a sorting alatt
function Sorting(){
  return(
    <div className='card-content'> //ez nem teljesen jó, lásd kövi pontban miért!
      <p>Sort Results by</p>
      <select name="" id=""> //select tab kell a legördülő menühöz
        <option value="">"Popularity Descending"</option> // option meg a tartalomhoz
        <option value="">Popularity Ascending</option>
        <option value="">Rating Descending</option>
        <option value="">Rating Ascending</option>
      </select>

    </div>
  )
}

probléma: klikk esemény bezárja a boxot, meg kell állítani a klikk öröklést
megoldás ez:
<div className='card-content' onClick={e => e.stopPropagation()}> //stop propagation

de ez jó régi kinézetű valami, készítünk egy sajátot

---------------------------------------------------------------------------------------
Combobox.js micro mappába
rfc enter

import React, {useState} from 'react' //importáljuk be a {useState}-t

export default function Combobox({items, selected_item}) {
  
    const [opened, set_opened] = useState(false) //1. state, augyan az mint a fentebbi html combonál
    const [current_item, set_current_item] = useState(selected_item) //2. state, ez meg azért kell, hogy az előzőleg kiválasztottat becsukás után is megtartsa
  
    return (
        <div className='combo-box'>
            <div className='combo-button'> 
                //ide került a js változó és a szokásos nyilas függvény is
                {current_item} {opened? <i className="fa-solid fa-angle-down"/> : <i className="fa-solid fa-angle-left"/>}
            </div>
        
        </div>
    )


következő lépés:
be kell rakni az előző combo helyére, hogy lássuk, formázzuk
Siderbar.js-be select tagek-et kivettük, helyére beraktuk az új combot, importálásra figyelni!
function Sorting(){
  return(
    <div className='card-content' onClick={e => e.stopPropagation()}>
      <p>Sort Results by</p>
      <Combobox items='' selected_item='Popularity Descending'/> //ide raktuk be és beadtuk a paramétereket is
    </div>
  )

main.css-be: //nem érdemes készíteni saját css-t, mert main az jó, amit több helyen használunk az ide kell
.combo-box .combo-button{
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    background-color: rgb(240, 235, 235);
    border-radius: var(--default-border-radius);
}


köetkező lépés:
klikkelés funkció nyil forgatás
<div className='combo-button' onClick={e => set_opened(!opened)}> //és már forog a nyil
figyelni hogy nem onClicked hanem onClick.... qml-el nem keverni!

köetkező lépés: legördülő menü
Sidebar.js:
items='' ide kell egy listát beszúrni
<Combobox items='' selected_item='Popularity Descending'/>


function Sorting(){
  
  const options = [ //itt a lista, options névvel
    'Popularity Descending',
    'Popularity Ascending',
    'Rating Descending',
    'Rating Ascending',
    'Release Date Descending',
    'Release Date Ascending',
    'A-Z Descending',
    'A-Z Ascending'
  ]
  
  return(
    <div className='card-content' onClick={e => e.stopPropagation()}>
      <p>Sort Results by</p>
      <Combobox items={options} selected_item='Popularity Descending'/> //ide lett beszúrva kapcsosban
    </div>
  )

érdemes a text helyére a lista 0-k elemét hivatkozni, olyan mint Pythonban
<Combobox items={options} selected_item={options[0]}/>

következő: lista elemeit be kellene vinni a boxba
ehhez majd a for loop kell, ez js-ben a map() parancs lesz
Combobox.js

            <div className='combo-items-container'>
                {
                    items.map(menu_item => <div className='combo-item'>{menu_item}</div>)
                }
            </div>
magyarázat: item listán végigmegy. minden eleme (i) a menu_item, ezeket berakja egy külön div-be
lényegében az a repater parancs, qt-ben is volt ilyen
azért kell div, mert azok csak egymás alá kerülhetnek, ez a tulajdonsága
és még class nevet is ad neki

ezt is átrendeztük csukogatósra
            {
                opened?
                    <div className='combo-items-container'>
                        {
                            items.map(menu_item => <div className='combo-item'>{menu_item}</div>)
                        }
                    </div>
                :
                    null
            }

mehetünk a main.CSS-be
itemeket így érjük el és formázhatjuk őket

.combo-box .combo-items-container{
    border: var(--default-border);
    border-radius: var(--default-border-radius);
    padding: 10px;
    position: absolute; //ezt azért csináljuk, hogy a combo box mérete ne növekedjen, hanem kilóg belőle
    background-color: white;
    width: 100% ; //ezzel azt akarjuk, hogy a parent szélességét vegye fel
    top: 50, //például ezzel lehet a pozíciót mozgatni fel le jobbra balra, ez csak példa itt
    box-shadow: -0px 0px 15px 3px rgba(0,0,0,0.15);
}
csak nem a fölöttét vette fel, hanem a body-ét, mert csak ott volt position definiálva
ezért a parent ami a combo box, ott lesz egy position relative definiálva
amit meg kell jegyezni, hogy mindig kell keresni egy parentet mikor positionálunk
.combo-box{
    position: relative; //ez beleszámolódik a hely szükségletbe (az absolute az nem)
}


feladat: görgető sáv készítés
ehhez meg kell adni egy max magasságot, így nem növeli a tartalomhoz a box-ot

.combo-box .combo-items-container{ // ezt folytatjuk
    max-height: 100px; //max magasság
    overflow-y: auto; //ha kifolyik akkor auto tesz görgetős sávot


feladat:
ha egy item felett állunk legyen kiemelve
.combo-box .combo-items-container .combo-item:hover{
    background-color: rgb(240, 235, 235);
}
kész, de nem ér ki a box szélére a háttér, mert ban padding feljebb
megoldás:
.combo-box .combo-items-container{
    padding: 10px; //törölni kell

viszont így kell az itemeknek padding, így:
.combo-box .combo-items-container .combo-item{
    padding-left: 10px;
}


következő:
elem kiválasztás
Combobox.js-be ezt a sorunkat bővítjük
items.map(menu_item => <div className='combo-item' onClick={e => set_current_item(menu_item)}>{menu_item}</div>)
// onClick eseményt adtunk hozzá
ezzel a current item a klikkelt item lesz

következő:
mikor kiválasztjuk amit akartunk záródjon be a box
tehát két state-t kellene a clikk eseménynek figyelnie
erre készítünk egy új függvényt
function handle_item_clicked(item_name){}
ez a mapes sor, függvény majd ezt hívja be és nem a set current itemet innen: const [current_item, set_current_item] = useState(selected_item)
items.map(menu_item => <div className='combo-item' onClick={e => handle_item_clicked(menu_item)}>{menu_item}</div>)

  ki kell próbálni, kiíratjuk consolba:
    function handle_item_clicked(item_name){
        console.log(item_name)
    }

működik, szóval beírjuk mit csináljon:
    function handle_item_clicked(item_name){ //mapes sor átadja a paramot a functionnak aza menu_item=item_name
        set_current_item(item_name) //current item= item_name, ez írja ki a szürke címsorba
        set_opened(false) //opened false lesz, ez zárja be
    }

következő:
emelje ki félkövérrel a kijelölt itemet

ha current item = menu item akkor activáljuk a kiemelést, azaz a className-ben az aktiv amit lent beírunk az active ha nem akkor eltűnik onnan

ezt a sorunkat bonyolítjuk tovább
items.map(menu_item => <div className='combo-item' onClick={e => set_current_item(menu_item)}>{menu_item}</div>)
//'combo-item' ezt a részt--->{`combo-item active`} //formázott string, altgr+7 gomb vessző
formázott stringbe tudunk javascript-et írni hogy active eltűnjön vagy ne, azaz ez változó lesz akkor
ilyen lett:
className={`combo-item ${current_item === menu_item? "active": ""}`} //dollár jel, kapcsos zárójel, ebbe megy a js condíció


ezután mehet a main.css
.combo-box .combo-items-container .combo-item.active{ //nagyon figyelni kell mert .active elé nem kell space ilyenkor, pici különbség de sokszor bele lehet hibázni
    background-color: rgb(240, 235, 235);
    font-weight: bold;
}

COMBO EZZEL KÉSZ---------------------------------------------------------

-------------------------------------------------------
filter rész könnyű, ott egy listán végig megy és berakja
function Filters(){
  
  const genres = [
    'Action',
    'Adventure',
    'Animation',
    'Comedy',
    'Crime',
    'Documentary',
  ]
  
  
  return(
    <div className='card-content' onClick={e => e.stopPropagation()}>
      {
        genres.map(genre_item => <div>{genre_item}</div>)
      }
    </div>
    
  )
}

---------------------------------------------------------------
készítünk search box-ot
micro-ba SearchBox.js
Navbar.js-be ezt <SearchBox/> beraktuk a nagyító ikon helyére azt meg átraktuk a SearchBox.js-be, eredmény uaz mint volt, de most lehet funkciót programozni

import React, { useState } from 'react' //useState import, figyelni a vesszőre
const [opened, set_opened] = useState(false) //ez az első state, function alá, return elé
<div onClick={e => set_opened(!opened)}> //div be a clik eseményt beírjuk
 első körben adjunk meg egy react js componentst a divben           
{
  opened?
  <div>Searchbar</div> //ezt is tegyük divbe
  :
  null
}
// utána próbáljuk ki, hogy működik-e, igen, mikor klikkelek megjelenik a szöveg utána meg eltűnik
akkor most cseréljük ki inputfield -re. kezdjük beírni hogy input, de ne a divbe, hanem kint utána rakjuk be, így VC segít, ha így sem segít akkor az emmet nincs beállítva, korábban erről volt szó

<div>Searchbar</div> ----> <input type="text" /> //erre cseréltük

utána: ikont átvittük a textfield mögé
            {
                opened?
                <input type="text" />
                :
                null
            }
            <i className="fa-solid fa-magnifying-glass"/>

utána: meg kell állítani a clikk eseményt, mert nem tudunk bele írni, bezárja, erre is adunk click eseményt (minden html komponensre lehet)
<input type="text" onClick={e => e.stopPropagation()} />

utána: adhatunk placeholdertext-et hozzá
<input type="text" placeholder='Search...' onClick={e => e.stopPropagation()} />

utána: jöhet a css, erre jó lesz a navbar.css mert úgyis csak ott lesz használva, ha máshol is akkor main.css a jó hely erre
először kell className: 
<div onClick={e => set_opened(!opened)} className='search-box-container'> //amikor a felsőnek ad nevet akkor containert szokott adni, így tudja, hogy ez a root és ebben van minden más
azaz itt: search-box-container-en belül az input az egyik, i a másik, mindkettőt így el lehet kapni css-ben

.search-box-container{
    display: flex; //rögtön középre rendeződött és strechelve lett a helyre
    align-items: center; //középre igazít
}

mivel nincs még global input-ra definíciónk, ezt a main.css-be megcsináljuk, azaz ha máshol lesz input még az oldalon, akkor egységes lesz a formátum, ezért rakjuk oda, nem a textfielded hanem az input taget!

main.css
input{
    font: inherit; //első lépés örökölje a betűt a felette lévő oldaltól, az a body tag
    padding-left: 5px;
    border: none;
    outline: none;
    border-radius: var(--default-border-radius);
}

main az kész is

Navbar.css-be, hogy kicsit eltolja magától a nagyítót
.search-box-container input{
    margin-right: 5px;
}

-----------------------------------------------------------------------------------------------------
MovieListView.js a következő, ebbe importálunk sok MovieCard.js-t

MovieCard.js

import Poster from "../../images/poster.webp" //először import
    <div>
        <img src={Poster} alt="poster" /> //utána ide berak
    </div>
ezzel egy csomó kép került az oldalra egymás alá

<div className='card movie-card'> //card az már volt, lett szép körvonal árnyék stb
de hozzá adtunk még egy nevet movie-card névvel, így egyedi jellemző is tudunk adni neki

Moviecard.css:
kép ne lógjon ki a cardból: overflow: hidden; parancs kell

----------------------------------------------------------------------------
    <BrowserRouter>
    
    <div className="App">
      <div>
        <Navbar/>
        
        <Routes>
          <Route path="/" element = {<Listview/>}/>
          <Route path="/tvshows" element = {<Listview/>}/>
          <Route path="/people" element = {<Listview/>}/>
          <Route path="/more" element = {<More/>}/>
          <Route path="/login" element = {<Login/>}/>
          <Route path="/registration" element = {<Registration/>}/>
          <Route path="/language" element = {<Language/>}/>

          <Route path="/movies/:slug" element = {<MovieDetails/>}/> //mikor valaminek a részletes oldalára megyünk a slug kell
: azt jelenti hogy nem string hanem egy változó kerül az url linkbe
slug az egy változó, slang (id_nev_stb) adatbázisban egy egyedi azonosito

        </Routes>

      </div>
      <Footer/>


    </div>

    </BrowserRouter>

---------------------------------------------
MovieDetails.js

import { useParams } from 'react-router-dom'
ezzel kiszedjük az url-ből a slug paramétert

példa: http://localhost:3000/movies/12354-movie
MovieDetails: 12354-movie, ezt nyomtatja ki

import React from 'react'
import { useParams } from 'react-router-dom'

export default function MovieDetails() {
  
    const {slug} = useParams() // slug-nak itt adunk értéket
    return (
    <div>
        MovieDetails: <span>{slug}</span> //slugot kiírja
    </div>
  )
}


